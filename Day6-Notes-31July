=========================================

Create Service in docker swarm cluster using custom image

# docker service rm mysvc

# docker service create --name mysvc -p 8181:3000 --replicas 4 sonal04/samplepyapp:v1

To access the replicas fo to worker 1 terminal and run the below command

# while true;do curl http://localhost:8181;sleep 1;echo " ";done

You will observe the request being forwarded to different replicas which are endpoints of the service- mysvc .

Scale up and scale down the service:

# docker service scale mysvc=6

# docker service scale mysvc=3

Rolling update:
==========================

Update the image of the service:

# docker service update --image sonal04/samplepyapp:v2 mysvc

Rollback to previous version of image:

# docker service rollback mysvc


===================
Docker Stack:
=====================================================

On the Manager Node

# vim myapp.yml

version: "3"
services:

  redis:
    image: redis:alpine
    networks:
      - frontend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "db"
      POSTGRES_HOST_AUTH_METHOD: "trust"  
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  db-data:


# docker stack deploy -c myapp.yml myvotingapp

# docker service ls

Go to the desktop -> firefox browser

localhost:5000 → to vote
localhost:5001 → to see results
