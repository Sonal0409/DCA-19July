If you master or worker nodes are not ready
You will have to reset kubernetes on the lab

ON THE MASTER NODE:
====================================

# kubeadm reset --force


ON THE both the WORKER NODES
===========================================

# kubadm reset

give y when asked

=======================================================
ON THE MASTER NODE:
============================================================

# kubeadm init --ignore-preflight-errors=all

Execute  THE BELOW COMMANDS
===================================
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config



# kubectl get nodes


Install Container network interface

# kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

# kubectl get nodes


Generate token on master node:

kubeadm token create --print-join-command


Copy token on worker nodes.
==================================

On the master node execute

# kubectl get nodes

All the workers will be part of cluster now

Kubernetes cluster is now ready.



















Execute commands on master node. No kubernetes commands run on Worker node.

Creation of POD in kubernetes.
============================

Create a pod to deploy container of our project Image.
Image is present in docker hub

Image name: sonal04/myredisproject


# kubectl run pod1 --image sonal04/myredisproject

# kubectl get pods

# vim pod1.yml

apiVersion: v1
kind: Pod
metadata:
  name: mypod
  labels:
   app: webserver
   author: sonal
spec:
 containers:
  - name: c1
    image: sonal04/myredisproject
  - name: c2
    image: tomcat



# kubectl create pod1.yml











Deploy multiple pods of the image:
===============================

# kubectl create deployment myproject --image sonal04/myredisproject --replicas 4
# kubectl get pods

Delete a pod

# kubectl delete pod <podname>

# kubectl get pods

New pod will be created

kubectl exec -it <podname> -- sh
/ # redis-cli
127.0.0.1:6379> ping
PONG



Delete all the pods for the deployment:

# kubectl delete  deployment --all






Kubernetes -> Container orchestration tool

1. Kubernetes -> also called as K8s.
2. Kubernetes also works in a cluster mode where it is installed on one VM and it manages various worker nodes.
3. In case Kubernetes the main VM is called as Master, and the other VMs are called as worker nodes.
4. By default no containers will be scheduled on the Master node, container will always be scheduled on worker nodes
5. Kubernetes can also create containers of docker as well as other container tools like CRI-O, containerD, Rkt container etc
6. The Kubernetes should have a unique Container runtime interface(container tool)
7. Once containers have been created, Kubernetes can auto scale the containers
8. Kubernetes allows us to store the data on storage drivers outside the cluster -> Persistent Volume
9. Kubernetes supports ingress load balancers
10. Kubernetes is also available as a service on various cloud platform like AWS, GCP or Azure
11 The names of k8s service are : EKS, AKS, GKE
12. In Kubernetes we have many objects to control various workflows on Kubernetes
      to create a replicas - POD, scaleup -> replicaSet , update Image -> Deployment , statefulset, service object, daemon sets
13. We can create jobs and cron jobs in Kubernetes
14. Kubernetes also supports various deployment strategies like: Rolling update, recrete, blue and green, canary deployment
15. Kubernetes also has a GUI -> Kubernetes Dashboard
16. Kubernetes provides objects like secrets to store sensitive data and configmap to store configurations in Kubernetes cluster

